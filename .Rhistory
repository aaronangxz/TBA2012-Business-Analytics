library(readxl)
detach("package:readxl", unload = TRUE)
library(readxl)
detach("package:readxl", unload = TRUE)
library(assertthat)
detach("package:assertthat", unload = TRUE)
library(readxl)
library(dplyr)
library(tidyr)
install.packages("ggplot2")
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(wooldridge)
install.packages("wooldridge")
install.packages("psych")
install.packages("rcompanion")
install.packages(c("rpivotTable", "EnvStats", "car", "TTR", "forecast", "olsrr", "factoextra", "caret", "tseries", "lpSolve"))
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(wooldridge)
# descriptive analytics
library(psych)
library(rcompanion)
library (rpivotTable)
library(EnvStats)
library(car)
# predictive/prescriptive analytics
library(TTR)
library(forecast)
library(olsrr)
library(factoextra)
library(caret)
library(tseries)
library(lpSolve)
install.packages("tsbox")
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=")
const.rhs <- c(5000, 3000, 2500)
lp.solution <- lp("main", objective.fn, const.mat, const.dir, const.rhs, compute.sense = TRUE)
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=")
const.rhs <- c(5000, 3000, 2500)
lp.solution <- lp("main", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=")
const.rhs <- c(5000, 3000, 2500)
lp.solution <- lp("min", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=")
const.rhs <- c(5000, 3000, 2500)
lp.solution <- lp("min", objective.fn, const.max, const.dir, const.rhs, compute.sens = TRUE)
lp.solution$solution
#Defining parameters
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=")
const.rhs <- c(5000, 3000, 2500)
#Solving model
lp.solution <- lp("min", objective.fn, const.max, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
#Defining parameters
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15,
1, 0, 0,
0, 1, 0,
0, 0, 1),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=","<=","<=","<=")
const.rhs <- c(5000, 3000, 2500, 60, 60, 60)
#Solving model
lp.solution <- lp("min", objective.fn, const.max, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
#Defining parameters
objective.fn <- c(1000,1200,1500)
const.max <- matrix(c(30, 40, 50,
20, 50, 40,
30, 10, 15,
1, 0, 0,
0, 1, 0,
0, 0, 1),
ncol = 3,
byrow = TRUE)
const.dir <- c(">=",">=",">=","<=","<=","<=")
const.rhs <- c(5000, 3000, 2500, 60, 60, 60)
#Solving model
lp.solution <- lp("min", objective.fn, const.max, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
lp.solution$sens.coef.from
lp.solution$sens.coef.to
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars
num_animals
num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars
num_animals
num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars
num_animals
num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars
num_animals
num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_car & num_animal & num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars & num_animal & num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
num_cars & num_animals & num_robots
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
print(num_cars & num_animals & num_robots)
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
print(num_cars, num_animals,num_robots)
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
cat(num_cars, num_animals,num_robots)
#Total number of cars, animals, robots
num_cars <- sum(lp.solution$solution*c(30,40,50))
num_animals <- sum(lp.solution$solution*c(20,50,40))
num_robots <- sum(lp.solution$solution*c(30,10,15))
cat(num_cars, num_animals,num_robots)
lp.solution$solution
lp.solution$duals
#Defining parameters
objective.fn <- c(500,120)
const.mat <- matrix(c(3, 7,
1, 0,
0, 1),
ncol = 2,
byrow = TRUE)
const.dir <- c("<=",">=",">=")
const.rhs <- c(60, 10, 5)
#Solving model
lp.solution <- lp("max", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
#Defining parameters
objective.fn <- c(500,120)
const.mat <- matrix(c(3, 7,
1, 0,
0, 1),
ncol = 2,
byrow = TRUE)
const.dir <- c("<=",">=",">=")
const.rhs <- c(120, 10, 5)
#Solving model
lp.solution <- lp("max", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
#Defining parameters
objective.fn <- c(50,120)
const.mat <- matrix(c(3, 7,
1, 0,
0, 1),
ncol = 2,
byrow = TRUE)
const.dir <- c("<=",">=",">=")
const.rhs <- c(60, 10, 5)
#Solving model
lp.solution <- lp("max", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
#Defining parameters
objective.fn <- c(50,120)
const.mat <- matrix(c(3, 7,
1, 0,
0, 1),
ncol = 2,
byrow = TRUE)
const.dir <- c("<=",">=",">=")
const.rhs <- c(120, 10, 5)
#Solving model
lp.solution <- lp("max", objective.fn, const.mat, const.dir, const.rhs, compute.sens = TRUE)
#Decision variables values
lp.solution$solution
lp.solution
lp.solution$sens.coef.from
lp.solution$sens.coef.to
lp.solution$duals
# load the data set, make sure you already load `wooldridge` package
data(ceosal1)
# load the data set, make sure you already load `wooldridge` package
data(ceosal1)
# load the data set, make sure you already load `wooldridge` package
data(ceosal1)
CS <- ceosal1
#Computing proportion of salary >= 1000 (Since unit is in k, 1 million is 1000k)
#Select rows with >= 1000
n1000 = CS%>%filter(salary>=1000)
salary.hat = nrow(n1000)/nrow(CS)
z.salaryhat <- (salary.hat - 0.5) / sqrt(0.5 * (1 - 0.5) / nrow(CS))
z.salaryhat
#Computing proportion of salary >= 1000 (Since unit is in k, 1 million is 1000k)
#Select rows with >= 1000
n1000 = CS%>%filter(salary>=1000)
salary.hat = nrow(n1000)/nrow(CS)
z.salaryhat <- (salary.hat - 0.5) / sqrt(0.5 * (1 - 0.5) / nrow(CS))
z.salaryhat
pnorm(z.salaryhat)
#Computing proportion of salary >= 1000 (Since unit is in k, 1 million is 1000k)
#Select rows with >= 1000
n1000 = CS%>%filter(salary>=1000)
salary.hat = nrow(n1000)/nrow(CS)
z.salaryhat <- (salary.hat - 0.5) / sqrt(0.5 * (1 - 0.5) / nrow(CS))
z.salaryhat
pnorm(z.salaryhat)
#Computing proportion of salary >= 1000 (Since unit is in k, 1 million is 1000k)
#Select rows with >= 1000
n1000 = CS%>%filter(salary>=1000)
salary.hat = nrow(n1000)/nrow(CS)
#Z-statistics
z.salaryhat <- (salary.hat - 0.5) / sqrt(0.5 * (1 - 0.5) / nrow(CS))
z.salaryhat
#p-value
pnorm(z.salaryhat)
#Create 'firm' variable
firm <- NA
CS$firm[CS$indus == 1] <- 1
CS$firm[CS$finance == 1] <- 2
CS$firm[CS$consprod == 1] <- 3
CS$firm[CS$utility == 1] <- 4
CS$firm = as.factor(CS$firm)
#Test normality of salary for each data segment
I <- CS %>% filter(indus == 1)
Fi <- CS %>% filter(finance == 1)
C <- CS %>% filter(consprud == 1)
#Test normality of salary for each data segment
I <- CS %>% filter(indus == 1)
Fi <- CS %>% filter(finance == 1)
C <- CS %>% filter(consprod == 1)
U <- CS %>% filter(utility == 1)
shapiro.test(I$salary)
#Test normality of salary for each data segment
I <- CS %>% filter(indus == 1)
Fi <- CS %>% filter(finance == 1)
C <- CS %>% filter(consprod == 1)
U <- CS %>% filter(utility == 1)
shapiro.test(I$salary)
shapiro.test(Fi$salary)
shapiro.test(C$salary)
shapiro.test(U$salary)
#Check sample sizes
nrow(I)
nrow(Fi)
nrow(C)
nrow(U)
#Check sample sizes
nrow(I)
nrow(Fi)
nrow(C)
nrow(U)
fligner.test(`salary`~firm,CS)
